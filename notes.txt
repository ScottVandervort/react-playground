Urls
-------------------------------------------

  https://www.javascriptstuff.com/component-communication/#1-props
  
  Making AJAX Calls
  https://medium.com/@baphemot/how-to-make-ajax-requests-in-react-a6a52bb5a8b1
  https://reactjs.org/docs/faq-ajax.html
  https://www.javascriptstuff.com/react-ajax-best-practices/

  Animations / Transitions
  https://stackoverflow.com/questions/37677059/slideup-and-slidedown-animation-using-react-js
  https://medium.com/@joethedave/achieving-ui-animations-with-react-the-right-way-562fa8a91935
  ( React Library ) https://github.com/reactjs/react-transition-group

JSX
-------------------------------------------

    - Everything must be enclosed in a single tag.

ES6
-------------------------------------------

    Import/export
    -------------------------------------------

        - It is possible to import/export multiple components from a file.
            At bottom of Component file :
                export { Comp1, Comp2 };
            At top of consumer :
                import { Comp1, Comp2 } from './FILE_NAME';
        - Only need to import Components that will be directly used; Do not need to import sub-components rendered by the component being imported

    Arrow Syntax ( => )

        - Use to preserve scope; Useful when declaring event handlers in render() as event will not necessarily be invoked in the class' scope.

    let versus var

        - let honors the scope {} 
        - var does not

        Example: 

            function myFunc () {
                var foo = "hello";
    
                if (foo) {
                    let foo = "bar";
                }

                return foo;
            }

            alert(myFunc()); // Returns "hello";


Routing
-------------------------------------------

    - Different packages for native and browser/dom

    npm install --save react-router-dom

    https://reacttraining.com/react-router/web/example/route-config
    https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf

AJAX
-------------------------------------------

    - React does not come with an AJAX library - you are supposed to use whatever you want.

        1. Directly in Component. ( Bad as presentation and data and logic are all-in-one )
        2. In Parent Component and then passed onto Child Components.
        3. Managed by Redux.

    - Can use HTML5 Fetch() method. It's a very simple / functional implementation of AJAX.

    - Best Practice : AJAX should only be performed in root/parent component.

Animation / Transitions
------------------------------------------

    - Css has capacity for transitions - but it doesn't work well with dynamic heights / widths.
    - React has a library for integrating transitions into it's virtual DOM. It supports Css or Javascript-based solutions.
        The Javasript solution defers to JQuery ( or another library ).



Flux / Redux
-------------------------------------------

    - Pattern for maintaining state between components; uses a Pub-Sub pattern.    


			
         --------------------------------Action
         ||                               /\
         \/                               ||		
   Dispatcher   =>    Store      =>      View
        /\               ||                
		||               \/
        ------------------

	Different than MVC ...
		- One-way binding; the View does NOT commnicate back to the Controller/Store.
		- Communication only goes one direction - through Dispatcher via Action.
		- Stores are like Models except they can manage more that one type of data.

	Dispatcher
		- sole receiver of Actions.
		- notifies Stores of changes.

	Stores 
		- sole maintainer of state.
		- sole maintainer of logic.
		- registers callbacks with the Dispatcher; when Dispatcher receives and Action is notifies the Store. 
		- can have dependencies on other stores; communicate through Actions / Dispatcher.

	Controller-View
		- listens to the Store for changes.




	



Components
-------------------------------------------

    - The simplist component can be a function that accepts a argument ( props ) and returns some JSX.
    - Component constructor should always accept at least one argument ( props ).
    - Always make sure you export the component.
    - Must be in PascalCase - no underscores.
    - Changes to State and Props will cause a re-render. Be careful or this could cause and endless loop.
    - Instead of storing stuff into this.{myData} - store it into State instead. 

    Simple
    -------------------------------------------

        The most simple component just returns JSX; it can also accept props.

        <!-- Declaration -->
        const SimpleComponent = (props) => (
            <span>Hello {props.myProp} <span>
        )

        <!-- Usage -->
        <SimpleComponent myProp="World"/>


    Props
    -------------------------------------------

        - Immutable; Do not modify.
        - Don't think of as element attributes :
            1. They can be complex objects whereas attributes can only be simple data types.
            2. They are never really visible on the element when browsing the markup - they are handled in Reacts's virtual DOM.


    State
    -------------------------------------------

        - State is not initialized; If want to use in render() need to define variable.

        - Best Practice : State should be managed ONLY in root/parent component - which trickles down to child components.

    Messaging 
    -------------------------------------------

        - Anything more complicated to direct child->parent or direct parent-<child communication should probably use Redux or publisher-subscriber.


        
TODO
-------------------------------------------

  


  1) Repeaters     
  
        1b) Nested.

  2) Routing
  
    2a) Nested Routing
  
  4) Authentication 
  5) Authorization    
    
  6) ES6

    6a) => 
    6b) ...
	6c) Promise
	6d) imports and exports

  7) Create CORS-enabled API that can be called by react starter project.

    7a) AJAX / Service Layer
    7b) Redux ( State Management / Component Communication )

  8) Integrating with JQuery Widgets

  

